# Generated by Django 5.0.6 on 2024-06-21 17:21

import django.db.models.deletion
import taggit.managers
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='NetworkService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port', models.IntegerField(verbose_name='Port')),
                ('protocol', models.CharField(choices=[('http', 'HTTP'), ('https', 'HTTPS'), ('ftp', 'FTP'), ('smtp', 'SMTP'), ('imap', 'IMAP'), ('pop3', 'POP3'), ('ssh', 'SSH'), ('telnet', 'Telnet'), ('sftp', 'SFTP'), ('mysql', 'MySQL'), ('postgresql', 'PostgreSQL'), ('mssql', 'MS SQL Server'), ('mongodb', 'MongoDB'), ('oracle', 'Oracle Database'), ('sqlite', 'SQLite'), ('redis', 'Redis'), ('memcached', 'Memcached'), ('rabbitmq', 'RabbitMQ'), ('rabbitmq_management', 'RabbitMQ Management'), ('amqp', 'AMQP'), ('amqps', 'AMQPS'), ('kafka', 'Kafka'), ('kafka_management', 'Kafka Management'), ('cassandra', 'Cassandra'), ('couchdb', 'CouchDB'), ('neo4j', 'Neo4j'), ('elastic', 'Elasticsearch'), ('file', 'File'), ('rdp', 'RDP'), ('vnc', 'VNC'), ('rdp_vnc', 'RDP VNC'), ('ssh_tunnel', 'SSH Tunnel'), ('mysql', 'MySQL'), ('postgresql', 'PostgreSQL'), ('mssql', 'MS SQL Server'), ('mongodb', 'MongoDB'), ('oracle', 'Oracle Database'), ('sqlite', 'SQLite'), ('redis', 'Redis'), ('aws_api', 'AWS API (HTTPS)'), ('azure_api', 'Azure API (HTTPS)'), ('gcp_api', 'GCP API (HTTPS)'), ('k8s_api', 'Kubernetes API (HTTP/HTTPS)'), ('etcd', 'etcd (gRPC)')], default='http', max_length=20, verbose_name='Protocol')),
                ('product', models.CharField(blank=True, default='', max_length=128, verbose_name='Product')),
                ('version', models.CharField(blank=True, default='', max_length=128, verbose_name='Version')),
                ('extrainfo', models.TextField(blank=True, default='', verbose_name='ExtraInfo')),
                ('conf', models.IntegerField(blank=True, default=0, verbose_name='Conf')),
                ('cpe', models.CharField(blank=True, default='', max_length=128, verbose_name='CPE')),
                ('ssl_date', models.TextField(blank=True, default='', verbose_name='SSL date')),
                ('ssl_hostkey', models.TextField(blank=True, default='', verbose_name='SSL hostkey')),
                ('ssl_cert', models.TextField(blank=True, default='', max_length=512, verbose_name='SSL cert')),
                ('tls_alpn', models.TextField(blank=True, default='', max_length=64, verbose_name='TLS alpn')),
                ('published', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('last_scanned', models.DateTimeField(blank=True, null=True, verbose_name='Last Scanned')),
            ],
            options={
                'verbose_name': 'Network Service',
                'verbose_name_plural': 'Network Services',
                'ordering': ['port', 'product', 'version', 'extrainfo', 'published'],
            },
        ),
        migrations.CreateModel(
            name='AutonomousSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asn', models.PositiveIntegerField(help_text='The unique Autonomous System Number (ASN)', unique=True, verbose_name='ASN')),
                ('name', models.CharField(help_text='The name or description of the autonomous system', max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, default='', help_text='Additional details or information about the AS', verbose_name='Description')),
                ('published', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the AS was first created in the database', verbose_name='Published')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Autonomous System',
                'verbose_name_plural': 'Autonomous Systems',
            },
        ),
        migrations.CreateModel(
            name='CIDRBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_scanned', models.BooleanField(auto_created=True, default=False, help_text='Indicates whether the CIDR block has been scanned for network assets')),
                ('cidr', models.CharField(help_text='The CIDR notation representing the IP address range (e.g., 192.168.0.0/24)', max_length=18, unique=True, verbose_name='CIDR Block')),
                ('published', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the CIDR block was first created in the database', verbose_name='Published')),
                ('autonomous_system', models.ForeignKey(help_text='The autonomous system that owns or manages this CIDR block', on_delete=django.db.models.deletion.CASCADE, related_name='cidr_blocks', to='asnet.autonomoussystem', verbose_name='Autonomous System')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'CIDRBlock',
                'verbose_name_plural': 'CIDRBlocks',
            },
        ),
        migrations.CreateModel(
            name='WebService',
            fields=[
                ('networkservice_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='asnet.networkservice')),
                ('url', models.URLField(db_index=True, default='', max_length=255, unique=True, verbose_name='URL')),
                ('server_header', models.CharField(blank=True, default='', max_length=256, verbose_name='HTTP server header')),
                ('title', models.TextField(blank=True, default='', verbose_name='HTTP title')),
                ('favicon', models.TextField(blank=True, default='', verbose_name='HTTP favicon')),
                ('robots', models.TextField(blank=True, default='', verbose_name='HTTP robots')),
                ('methods', models.TextField(blank=True, default='', verbose_name='HTTP methods')),
                ('cookie_flags', models.TextField(blank=True, default='', verbose_name='HTTP cookie flags')),
                ('fingerprint', models.TextField(blank=True, default='', verbose_name='Fingerprint strings')),
                ('report_urlscanio', models.URLField(blank=True, db_index=True, max_length=255, unique=True, verbose_name='urlscan.io')),
            ],
            options={
                'verbose_name': 'Web Service',
                'verbose_name_plural': 'Web Services',
                'ordering': ['port', 'product', 'version', 'title', 'published'],
            },
            bases=('asnet.networkservice',),
        ),
        migrations.CreateModel(
            name='IpHost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_alive', models.BooleanField(auto_created=True, default=False, help_text='Indicates whether the host is currently responsive', verbose_name='Is Alive')),
                ('ip', models.GenericIPAddressField(help_text='The IP address of the host', verbose_name='IP')),
                ('name', models.CharField(default='', help_text='The hostname or descriptive name of the host', max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, default='', help_text='Additional details or information about the host', verbose_name='Description')),
                ('published', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the host was first created in the database', verbose_name='Published')),
                ('services_info', models.TextField(blank=True, default='', help_text='Textual information about services running on the host', verbose_name='Services Info')),
                ('http_title', models.CharField(blank=True, default='', help_text='The title of the HTTP response if a web server is running on port 80', max_length=512, verbose_name='HTTP Title')),
                ('https_title', models.CharField(blank=True, default='', help_text='The title of the HTTPS response if a web server is running on port 443', max_length=512, verbose_name='HTTP SSL Title')),
                ('host_domain', models.CharField(blank=True, default='', help_text='The domain name associated with the host, if applicable', max_length=512, verbose_name='Host Domain')),
                ('last_scanned', models.DateTimeField(blank=True, help_text='Timestamp of the last time the host was scanned for updates', null=True, verbose_name='Last Scanned')),
                ('cidr', models.ForeignKey(help_text='The CIDR block that this host belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='ip_hosts', to='asnet.cidrblock', verbose_name='CIDR Block')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('services', models.ManyToManyField(blank=True, help_text='The network services running on this host', related_name='ip_hosts', to='asnet.networkservice', verbose_name='Network Services')),
            ],
            options={
                'verbose_name': 'IP Host',
                'verbose_name_plural': 'IP Hosts',
                'ordering': ['last_scanned', 'published'],
                'unique_together': {('ip', 'cidr')},
            },
        ),
        migrations.CreateModel(
            name='ScanAsnJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('done', 'Done'), ('failed', 'Failed')], default='pending', help_text='The current status of the job', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the job was first created')),
                ('error_message', models.CharField(default='', help_text='An error message if the job failed', max_length=512)),
                ('asn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='asnet.autonomoussystem', verbose_name='Autonomous System')),
            ],
            options={
                'verbose_name': 'Scan Autonomous System Job',
            },
        ),
        migrations.CreateModel(
            name='ScanCIDRBlockJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('done', 'Done'), ('failed', 'Failed')], default='pending', help_text='The current status of the job', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the job was first created')),
                ('error_message', models.CharField(default='', help_text='An error message if the job failed', max_length=512)),
                ('cidr_block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='asnet.cidrblock', verbose_name='CIDR Block')),
            ],
            options={
                'verbose_name': 'Scan CIDR Block Job',
            },
        ),
        migrations.CreateModel(
            name='ScanIpHostJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('done', 'Done'), ('failed', 'Failed')], default='pending', help_text='The current status of the job', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the job was first created')),
                ('error_message', models.CharField(default='', help_text='An error message if the job failed', max_length=512)),
                ('scan', models.CharField(choices=[('nmap', 'Nmap'), ('scan2', 'Scan Type 2'), ('scan3', 'Scan Type 3')], default='nmap', max_length=50, verbose_name='Scan Type')),
                ('ip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='asnet.iphost', verbose_name='IP Host')),
            ],
            options={
                'verbose_name': 'Scan IP Target Job',
            },
        ),
        migrations.CreateModel(
            name='WebDomain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_scanned', models.BooleanField(auto_created=True, default=False)),
                ('is_alive', models.BooleanField(auto_created=True, default=False, verbose_name='Is Alive')),
                ('url', models.URLField(db_index=True, default='', max_length=255, unique=True, verbose_name='URL')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('published', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('last_scanned', models.DateTimeField(blank=True, null=True, verbose_name='Last Scanned')),
                ('autonomous_system', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='web_domains', to='asnet.autonomoussystem', verbose_name='Autonomous System')),
                ('ip_hosts', models.ManyToManyField(blank=True, related_name='web_domains', to='asnet.iphost', verbose_name='Host IPs')),
                ('parent_domain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subdomains', to='asnet.webdomain', verbose_name='Parent Domain')),
                ('services', models.ManyToManyField(blank=True, related_name='web_domains', to='asnet.webservice', verbose_name='Network Services')),
            ],
            options={
                'verbose_name': 'Web Domain',
                'verbose_name_plural': 'Web Domains',
                'ordering': ['url', 'last_scanned', 'published'],
            },
        ),
        migrations.CreateModel(
            name='ScanWebDomainJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('done', 'Done'), ('failed', 'Failed')], default='pending', help_text='The current status of the job', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the job was first created')),
                ('error_message', models.CharField(default='', help_text='An error message if the job failed', max_length=512)),
                ('scan', models.CharField(choices=[('nuclei', 'nuclei'), ('urlscanio', 'urlscan.io'), ('scan3', 'Scan Type 3')], default='nuclei', max_length=50, verbose_name='Scan Type')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='asnet.webdomain', verbose_name='Web Domain Host')),
            ],
            options={
                'verbose_name': 'Scan Web Domain Job',
            },
        ),
    ]
